// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	device "model/device"
	library "model/library"

	mock "github.com/stretchr/testify/mock"

	session "model/session"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// AddDevice provides a mock function with given fields: _a0
func (_m *Manager) AddDevice(_a0 device.Device) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(device.Device) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddLibrary provides a mock function with given fields: _a0
func (_m *Manager) AddLibrary(_a0 library.Library) {
	_m.Called(_a0)
}

// CreateSession provides a mock function with given fields: deviceID, mediaID, subtitleID
func (_m *Manager) CreateSession(deviceID string, mediaID string, subtitleID string) (session.Session, error) {
	ret := _m.Called(deviceID, mediaID, subtitleID)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (session.Session, error)); ok {
		return rf(deviceID, mediaID, subtitleID)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) session.Session); ok {
		r0 = rf(deviceID, mediaID, subtitleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(deviceID, mediaID, subtitleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMedia provides a mock function with given fields: mediaID
func (_m *Manager) GetMedia(mediaID string) (library.Media, error) {
	ret := _m.Called(mediaID)

	if len(ret) == 0 {
		panic("no return value specified for GetMedia")
	}

	var r0 library.Media
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (library.Media, error)); ok {
		return rf(mediaID)
	}
	if rf, ok := ret.Get(0).(func(string) library.Media); ok {
		r0 = rf(mediaID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(library.Media)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(mediaID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDevices provides a mock function with given fields:
func (_m *Manager) ListDevices() map[string]device.Device {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListDevices")
	}

	var r0 map[string]device.Device
	if rf, ok := ret.Get(0).(func() map[string]device.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]device.Device)
		}
	}

	return r0
}

// ListLibraries provides a mock function with given fields:
func (_m *Manager) ListLibraries() map[string]library.Library {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListLibraries")
	}

	var r0 map[string]library.Library
	if rf, ok := ret.Get(0).(func() map[string]library.Library); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]library.Library)
		}
	}

	return r0
}

// ListMedia provides a mock function with given fields: libraryID
func (_m *Manager) ListMedia(libraryID string) ([]library.Media, error) {
	ret := _m.Called(libraryID)

	if len(ret) == 0 {
		panic("no return value specified for ListMedia")
	}

	var r0 []library.Media
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]library.Media, error)); ok {
		return rf(libraryID)
	}
	if rf, ok := ret.Get(0).(func(string) []library.Media); ok {
		r0 = rf(libraryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]library.Media)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(libraryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
