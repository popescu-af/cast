// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	device "model/device"
	library "model/library"

	mock "github.com/stretchr/testify/mock"
)

// Device is an autogenerated mock type for the Device type
type Device struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Device) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fwd provides a mock function with given fields: offsetInSeconds
func (_m *Device) Fwd(offsetInSeconds float64) error {
	ret := _m.Called(offsetInSeconds)

	if len(ret) == 0 {
		panic("no return value specified for Fwd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(float64) error); ok {
		r0 = rf(offsetInSeconds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPlaybackInfo provides a mock function with given fields:
func (_m *Device) GetPlaybackInfo() (device.PlaybackInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPlaybackInfo")
	}

	var r0 device.PlaybackInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (device.PlaybackInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() device.PlaybackInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(device.PlaybackInfo)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ID provides a mock function with given fields:
func (_m *Device) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Load provides a mock function with given fields: media, subtitles
func (_m *Device) Load(media library.Media, subtitles library.Media) error {
	ret := _m.Called(media, subtitles)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(library.Media, library.Media) error); ok {
		r0 = rf(media, subtitles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Pause provides a mock function with given fields:
func (_m *Device) Pause() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pause")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Play provides a mock function with given fields:
func (_m *Device) Play() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Play")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rev provides a mock function with given fields: offsetInSeconds
func (_m *Device) Rev(offsetInSeconds float64) error {
	ret := _m.Called(offsetInSeconds)

	if len(ret) == 0 {
		panic("no return value specified for Rev")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(float64) error); ok {
		r0 = rf(offsetInSeconds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Seek provides a mock function with given fields: absolutePercentage
func (_m *Device) Seek(absolutePercentage float64) error {
	ret := _m.Called(absolutePercentage)

	if len(ret) == 0 {
		panic("no return value specified for Seek")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(float64) error); ok {
		r0 = rf(absolutePercentage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Device) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDevice creates a new instance of Device. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDevice(t interface {
	mock.TestingT
	Cleanup(func())
}) *Device {
	mock := &Device{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
